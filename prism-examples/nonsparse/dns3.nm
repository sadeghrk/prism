mdp
module m1
 s1 : [1..8];
 [q1] s1 = 1 -> .05:(s1' = 1) + .43 : (s1' = 2) + .4:(s1' = 3) + .02:(s1' = 4) + .03:(s1' = 5) + .02:(s1' = 6) +.03:(s1' = 7) +.02:(s1' = 8);
 [q2] s1 = 1 -> .05:(s1' = 1) + .43 : (s1' = 6) + .4:(s1' = 7) + .02:(s1' = 4) + .03:(s1' = 5) + .02:(s1' = 2) +.03:(s1' = 3) +.02:(s1' = 8);
 [q1] s1 = 2 -> .05:(s1' = 1) + .43 : (s1' = 2) + .4:(s1' = 3) + .02:(s1' = 5) + .03:(s1' = 5) + .02:(s1' = 6) +.03:(s1' = 7) +.02:(s1' = 8);
 [q2] s1 = 2 -> .05:(s1' = 1) + .43 : (s1' = 6) + .4:(s1' = 7) + .02:(s1' = 3) + .03:(s1' = 5) + .02:(s1' = 2) +.03:(s1' = 3) +.02:(s1' = 8);
 [q1] s1 = 3 -> .05:(s1' = 1) + .43 : (s1' = 1) + .4:(s1' = 3) + .02:(s1' = 4) + .03:(s1' = 5) + .02:(s1' = 6) +.03:(s1' = 7) +.02:(s1' = 8);
 [q2] s1 = 3 -> .05:(s1' = 1) + .43 : (s1' = 5) + .4:(s1' = 7) + .02:(s1' = 4) + .03:(s1' = 5) + .02:(s1' = 2) +.03:(s1' = 3) +.02:(s1' = 8);
 [q1] s1 = 4 -> .05:(s1' = 1) + .43 : (s1' = 2) + .4:(s1' = 3) + .02:(s1' = 7) + .03:(s1' = 5) + .02:(s1' = 6) +.03:(s1' = 7) +.02:(s1' = 8);
 [q2] s1 = 4 -> .05:(s1' = 1) + .43 : (s1' = 8) + .4:(s1' = 7) + .02:(s1' = 8) + .03:(s1' = 5) + .02:(s1' = 2) +.03:(s1' = 3) +.02:(s1' = 8);
 [q1] s1 = 5 -> .05:(s1' = 1) + .43 : (s1' = 7) + .3:(s1' = 3) + .12:(s1' = 4) + .03:(s1' = 5) + .02:(s1' = 6) +.03:(s1' = 7) +.02:(s1' = 8);
 [q2] s1 = 5 -> .05:(s1' = 1) + .43 : (s1' = 6) + .3:(s1' = 7) + .06:(s1' = 4) + .09:(s1' = 5) + .02:(s1' = 2) +.03:(s1' = 3) +.02:(s1' = 8);
 [q1] s1 = 6 -> .05:(s1' = 1) + .43 : (s1' = 5) + .4:(s1' = 3) + .02:(s1' = 2) + .03:(s1' = 5) + .02:(s1' = 6) +.03:(s1' = 7) +.02:(s1' = 8);
 [q2] s1 = 6 -> .05:(s1' = 1) + .43 : (s1' = 4) + .4:(s1' = 7) + .02:(s1' = 2) + .03:(s1' = 5) + .02:(s1' = 2) +.03:(s1' = 3) +.02:(s1' = 8);
 [q1] s1 = 7 -> .05:(s1' = 1) + .43 : (s1' = 8) + .4:(s1' = 3) + .02:(s1' = 4) + .03:(s1' = 5) + .02:(s1' = 6) +.03:(s1' = 7) +.02:(s1' = 8);
 [q2] s1 = 7 -> .05:(s1' = 1) + .43 : (s1' = 2) + .4:(s1' = 7) + .02:(s1' = 4) + .03:(s1' = 5) + .02:(s1' = 2) +.03:(s1' = 3) +.02:(s1' = 8);
 [q1] s1 = 8 -> .05:(s1' = 1) + .43 : (s1' = 1) + .3:(s1' = 3) + .02:(s1' = 1) + .13:(s1' = 5) + .02:(s1' = 6) +.03:(s1' = 7) +.02:(s1' = 8);
 [q2] s1 = 8 -> .05:(s1' = 1) + .43 : (s1' = 6) + .28:(s1' = 7) + .02:(s1' = 5) + .09:(s1' = 5) + .08:(s1' = 2) +.03:(s1' = 3) +.02:(s1' = 8);
endmodule
module m2 = m1[s1 = s2] endmodule
module m3
 s3 : [1..8];
 [q1] s3 = 1 -> .15:(s3' = 1) + .23 : (s3' = 2) + .4:(s3' = 3) + .12:(s3' = 4) + .03:(s3' = 5) + .02:(s3' = 6) +.03:(s3' = 7) +.02:(s3' = 8);
 [q2] s3 = 1 -> .05:(s3' = 1) + .43 : (s3' = 6) + .4:(s3' = 7) + .02:(s3' = 4) + .03:(s3' = 5) + .02:(s3' = 2) +.03:(s3' = 3) +.02:(s3' = 8);
 [q1] s3 = 2 -> .15:(s3' = 1) + .23 : (s3' = 8) + .4:(s3' = 3) + .12:(s3' = 5) + .03:(s3' = 5) + .02:(s3' = 6) +.03:(s3' = 7) +.02:(s3' = 8);
 [q2] s3 = 2 -> .05:(s3' = 1) + .43 : (s3' = 6) + .4:(s3' = 7) + .02:(s3' = 3) + .03:(s3' = 5) + .02:(s3' = 2) +.03:(s3' = 3) +.02:(s3' = 8);
 [q1] s3 = 3 -> .25:(s3' = 1) + .23 : (s3' = 1) + .4:(s3' = 3) + .02:(s3' = 4) + .03:(s3' = 5) + .02:(s3' = 6) +.03:(s3' = 7) +.02:(s3' = 8);
 [q2] s3 = 3 -> .15:(s3' = 1) + .23 : (s3' = 5) + .4:(s3' = 7) + .12:(s3' = 4) + .03:(s3' = 5) + .02:(s3' = 2) +.03:(s3' = 3) +.02:(s3' = 8);
 [q1] s3 = 4 -> .05:(s3' = 1) + .43 : (s3' = 2) + .4:(s3' = 3) + .02:(s3' = 7) + .03:(s3' = 5) + .02:(s3' = 6) +.03:(s3' = 7) +.02:(s3' = 8);
 [q2] s3 = 4 -> .05:(s3' = 1) + .43 : (s3' = 8) + .4:(s3' = 7) + .02:(s3' = 8) + .03:(s3' = 5) + .02:(s3' = 2) +.03:(s3' = 3) +.02:(s3' = 8);
 [q1] s3 = 5 -> .05:(s3' = 1) + .43 : (s3' = 7) + .3:(s3' = 3) + .12:(s3' = 4) + .03:(s3' = 5) + .02:(s3' = 6) +.03:(s3' = 7) +.02:(s3' = 8);
 [q2] s3 = 5 -> .15:(s3' = 1) + .23 : (s3' = 6) + .3:(s3' = 7) + .16:(s3' = 4) + .09:(s3' = 5) + .02:(s3' = 2) +.03:(s3' = 3) +.02:(s3' = 8);
 [q1] s3 = 6 -> .05:(s3' = 1) + .43 : (s3' = 5) + .4:(s3' = 3) + .02:(s3' = 2) + .03:(s3' = 5) + .02:(s3' = 6) +.03:(s3' = 7) +.02:(s3' = 8);
 [q2] s3 = 6 -> .05:(s3' = 1) + .43 : (s3' = 4) + .4:(s3' = 7) + .02:(s3' = 2) + .03:(s3' = 5) + .02:(s3' = 2) +.03:(s3' = 3) +.02:(s3' = 8);
 [q1] s3 = 7 -> .15:(s3' = 1) + .23 : (s3' = 3) + .4:(s3' = 3) + .12:(s3' = 4) + .03:(s3' = 5) + .02:(s3' = 6) +.03:(s3' = 7) +.02:(s3' = 8);
 [q2] s3 = 7 -> .05:(s3' = 1) + .43 : (s3' = 2) + .4:(s3' = 7) + .02:(s3' = 4) + .03:(s3' = 5) + .02:(s3' = 2) +.03:(s3' = 3) +.02:(s3' = 8);
 [q1] s3 = 8 -> .15:(s3' = 1) + .23 : (s3' = 1) + .3:(s3' = 3) + .12:(s3' = 1) + .13:(s3' = 5) + .02:(s3' = 6) +.03:(s3' = 7) +.02:(s3' = 8);
 [q2] s3 = 8 -> .15:(s3' = 1) + .23 : (s3' = 6) + .28:(s3' = 7) + .12:(s3' = 5) + .09:(s3' = 5) + .08:(s3' = 2) +.03:(s3' = 3) +.02:(s3' = 8);
endmodule
module m4
 s4 : [1..8];
 [q1] s4 = 1 -> .1:(s4' = 2) + .1:(s4' = 3) + .6:(s4' = 5) + .1:(s4' = 6) + .04:(s4' = 7) + .06:(s4' = 8);
 [q2] s4 = 1 -> .1:(s4' = 2) + .2:(s4' = 3) + .5:(s4' = 4) + .1:(s4' = 6) + .04:(s4' = 5) + .06:(s4' = 8);
 [q1] s4 = 1 -> .1:(s4' = 8) + .2:(s4' = 7) + .5:(s4' = 6) + .1:(s4' = 5) + .04:(s4' = 4) + .06:(s4' = 3);
 [q2] s4 = 1 -> .2:(s4' = 2) + .1:(s4' = 3) + .5:(s4' = 4) + .1:(s4' = 6) + .04:(s4' = 5) + .06:(s4' = 8);
 [q1] s4 = 2 -> .1:(s4' = 2) + .1:(s4' = 3) + .6:(s4' = 3) + .01:(s4' = 6) + .13:(s4' = 7) + .06:(s4' = 8);
 [q2] s4 = 2 -> .1:(s4' = 2) + .2:(s4' = 3) + .4:(s4' = 4) + .2:(s4' = 6) + .04:(s4' = 5) + .06:(s4' = 8);
 [q1] s4 = 3 -> .1:(s4' = 2) + .1:(s4' = 3) + .6:(s4' = 5) + .1:(s4' = 6) + .04:(s4' = 7) + .06:(s4' = 8);
 [q2] s4 = 3 -> .1:(s4' = 2) + .2:(s4' = 3) + .5:(s4' = 6) + .1:(s4' = 6) + .04:(s4' = 5) + .06:(s4' = 8);
 [q1] s4 = 4 -> .1:(s4' = 2) + .1:(s4' = 3) + .6:(s4' = 5) + .1:(s4' = 6) + .04:(s4' = 7) + .06:(s4' = 8);
 [q2] s4 = 4 -> .1:(s4' = 2) + .2:(s4' = 3) + .5:(s4' = 8) + .1:(s4' = 6) + .04:(s4' = 5) + .06:(s4' = 8);
 [q1] s4 = 5 -> .1:(s4' = 2) + .1:(s4' = 3) + .6:(s4' = 5) + .1:(s4' = 6) + .04:(s4' = 7) + .06:(s4' = 8);
 [q2] s4 = 5 -> .1:(s4' = 2) + .2:(s4' = 3) + .5:(s4' = 3) + .1:(s4' = 6) + .07:(s4' = 5) + .03:(s4' = 8);
 [q1] s4 = 6 -> .1:(s4' = 2) + .1:(s4' = 3) + .6:(s4' = 2) + .1:(s4' = 6) + .03:(s4' = 7) + .07:(s4' = 8);
 [q2] s4 = 6 -> .1:(s4' = 2) + .2:(s4' = 3) + .6:(s4' = 1) + .03:(s4' = 6) + .02:(s4' = 5) + .05:(s4' = 8);
 [q1] s4 = 7 -> .1:(s4' = 2) + .1:(s4' = 3) + .6:(s4' = 2) + .1:(s4' = 6) + .04:(s4' = 7) + .06:(s4' = 8);
 [q2] s4 = 7 -> .1:(s4' = 2) + .2:(s4' = 3) + .5:(s4' = 8) + .1:(s4' = 6) + .01:(s4' = 5) + .09:(s4' = 8);
 [q1] s4 = 8 -> .1:(s4' = 2) + .1:(s4' = 3) + .6:(s4' = 5) + .1:(s4' = 6) + .04:(s4' = 7) + .06:(s4' = 8);
 [q2] s4 = 8 -> .11:(s4' = 2) + .09:(s4' = 3) + .6:(s4' = 4) + .1:(s4' = 6) + .04:(s4' = 5) + .06:(s4' = 8);
endmodule 


label  "PP" = mod(s1 + s2 + s3 + s4 , 118) != 7;//!(s2 + s1 + s3 + s4 = 18 & s1 + s3 > 5 & mod(s4+s2,5)=1);
label "QQ" = s1 = 8 & s2 = 8 & s3 = 8 & s4 > 6;
